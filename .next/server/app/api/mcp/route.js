"use strict";(()=>{var e={};e.id=694,e.ids=[694],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},97357:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>P,patchFetch:()=>v,requestAsyncStorage:()=>h,routeModule:()=>l,serverHooks:()=>m,staticGenerationAsyncStorage:()=>d});var o={};r.r(o),r.d(o,{GET:()=>c,POST:()=>u});var s=r(87916),a=r(49930),n=r(2169),i=r(4389);let p=process.env.MCP_SERVER_URL||"http://localhost:3001";async function u(e){let t=await e.json(),r=e.nextUrl.searchParams.get("service");try{let e=await fetch(`${p}/api/${r}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw Error(`HTTP error! status: ${e.status}`);let o=await e.json();return i.NextResponse.json(o)}catch(e){return console.error("MCP service error:",e),i.NextResponse.json({error:"MCP service error"},{status:500})}}async function c(e){try{let e=await fetch(`${p}/api/health`);if(!e.ok)throw Error(`HTTP error! status: ${e.status}`);return i.NextResponse.json({status:"ok"})}catch(e){return console.error("MCP health check failed:",e),i.NextResponse.json({error:"MCP server is not responding"},{status:503})}}let l=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/mcp/route",pathname:"/api/mcp",filename:"route",bundlePath:"app/api/mcp/route"},resolvedPagePath:"C:\\Bollo\\Github\\flowstate-catalyst\\src\\app\\api\\mcp\\route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:h,staticGenerationAsyncStorage:d,serverHooks:m}=l,P="/api/mcp/route";function v(){return(0,n.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:d})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[237,136],()=>r(97357));module.exports=o})();