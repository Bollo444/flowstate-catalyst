"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/whatwg-url";
exports.ids = ["vendor-chunks/whatwg-url"];
exports.modules = {

/***/ "(ssr)/./node_modules/whatwg-url/lib/URL-impl.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL-impl.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst usm = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\");\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n    const parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n  }\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", {\n      url: this._url,\n      stateOverride: \"scheme start\"\n    });\n  }\n  get username() {\n    return this._url.username;\n  }\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setTheUsername(this._url, v);\n  }\n  get password() {\n    return this._url.password;\n  }\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setThePassword(this._url, v);\n  }\n  get host() {\n    const url = this._url;\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"host\"\n    });\n  }\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n    return usm.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"hostname\"\n    });\n  }\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n    return usm.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"port\"\n      });\n    }\n  }\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n    return \"/\" + this._url.path.join(\"/\");\n  }\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    this._url.path = [];\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"path start\"\n    });\n  }\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, {\n      url,\n      stateOverride: \"query\"\n    });\n  }\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, {\n      url: this._url,\n      stateOverride: \"fragment\"\n    });\n  }\n  toJSON() {\n    return this.href;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URL-impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URL.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/./node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/whatwg-url/lib/utils.js\");\nconst Impl = __webpack_require__(/*! .//URL-impl.js */ \"(ssr)/./node_modules/whatwg-url/lib/URL-impl.js\");\nconst impl = utils.implSymbol;\nfunction URL(url) {\n  if (!this || this[impl] || !(this instanceof URL)) {\n    throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.\");\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 2; ++i) {\n    args[i] = arguments[i];\n  }\n  args[0] = conversions[\"USVString\"](args[0]);\n  if (args[1] !== undefined) {\n    args[1] = conversions[\"USVString\"](args[1]);\n  }\n  module.exports.setup(this, args);\n}\nURL.prototype.toJSON = function toJSON() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 0; ++i) {\n    args[i] = arguments[i];\n  }\n  return this[impl].toJSON.apply(this[impl], args);\n};\nObject.defineProperty(URL.prototype, \"href\", {\n  get() {\n    return this[impl].href;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].href = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nURL.prototype.toString = function () {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  return this.href;\n};\nObject.defineProperty(URL.prototype, \"origin\", {\n  get() {\n    return this[impl].origin;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"protocol\", {\n  get() {\n    return this[impl].protocol;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].protocol = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"username\", {\n  get() {\n    return this[impl].username;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].username = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"password\", {\n  get() {\n    return this[impl].password;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].password = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"host\", {\n  get() {\n    return this[impl].host;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].host = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"hostname\", {\n  get() {\n    return this[impl].hostname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hostname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"port\", {\n  get() {\n    return this[impl].port;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].port = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"pathname\", {\n  get() {\n    return this[impl].pathname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].pathname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"search\", {\n  get() {\n    return this[impl].search;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].search = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"hash\", {\n  get() {\n    return this[impl].hash;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hash = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: URL,\n  expose: {\n    Window: {\n      URL: URL\n    },\n    Worker: {\n      URL: URL\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/public-api.js":
/*!***************************************************!*\
  !*** ./node_modules/whatwg-url/lib/public-api.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nexports.URL = __webpack_require__(/*! ./URL */ \"(ssr)/./node_modules/whatwg-url/lib/URL.js\")[\"interface\"];\nexports.serializeURL = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeURL;\nexports.serializeURLOrigin = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeURLOrigin;\nexports.basicURLParse = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").basicURLParse;\nexports.setTheUsername = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").setTheUsername;\nexports.setThePassword = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").setThePassword;\nexports.serializeHost = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeHost;\nexports.serializeInteger = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeInteger;\nexports.parseURL = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\").parseURL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvcHVibGljLWFwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEseUdBQXdDO0FBQ3hDQSw4SUFBa0U7QUFDbEVBLDBKQUE4RTtBQUM5RUEsZ0pBQW9FO0FBQ3BFQSxrSkFBc0U7QUFDdEVBLGtKQUFzRTtBQUN0RUEsZ0pBQW9FO0FBQ3BFQSxzSkFBMEU7QUFDMUVBLHNJQUEwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3dzdGF0ZS1jYXRhbHlzdC8uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi9wdWJsaWMtYXBpLmpzPzJkODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuVVJMID0gcmVxdWlyZShcIi4vVVJMXCIpLmludGVyZmFjZTtcbmV4cG9ydHMuc2VyaWFsaXplVVJMID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2VyaWFsaXplVVJMO1xuZXhwb3J0cy5zZXJpYWxpemVVUkxPcmlnaW4gPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXJpYWxpemVVUkxPcmlnaW47XG5leHBvcnRzLmJhc2ljVVJMUGFyc2UgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5iYXNpY1VSTFBhcnNlO1xuZXhwb3J0cy5zZXRUaGVVc2VybmFtZSA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNldFRoZVVzZXJuYW1lO1xuZXhwb3J0cy5zZXRUaGVQYXNzd29yZCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNldFRoZVBhc3N3b3JkO1xuZXhwb3J0cy5zZXJpYWxpemVIb3N0ID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2VyaWFsaXplSG9zdDtcbmV4cG9ydHMuc2VyaWFsaXplSW50ZWdlciA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNlcmlhbGl6ZUludGVnZXI7XG5leHBvcnRzLnBhcnNlVVJMID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikucGFyc2VVUkw7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsIlVSTCIsInJlcXVpcmUiLCJpbnRlcmZhY2UiLCJzZXJpYWxpemVVUkwiLCJzZXJpYWxpemVVUkxPcmlnaW4iLCJiYXNpY1VSTFBhcnNlIiwic2V0VGhlVXNlcm5hbWUiLCJzZXRUaGVQYXNzd29yZCIsInNlcmlhbGl6ZUhvc3QiLCJzZXJpYWxpemVJbnRlZ2VyIiwicGFyc2VVUkwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/public-api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js":
/*!**********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/url-state-machine.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\nconst tr46 = __webpack_require__(/*! tr46 */ \"(ssr)/./node_modules/tr46/index.js\");\nconst specialSchemes = {\n  ftp: 21,\n  file: null,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\nconst failure = Symbol(\"failure\");\nfunction countSymbols(str) {\n  return punycode.ucs2.decode(str).length;\n}\nfunction at(input, idx) {\n  const c = input[idx];\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\nfunction isASCIIDigit(c) {\n  return c >= 0x30 && c <= 0x39;\n}\nfunction isASCIIAlpha(c) {\n  return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;\n}\nfunction isASCIIAlphanumeric(c) {\n  return isASCIIAlpha(c) || isASCIIDigit(c);\n}\nfunction isASCIIHex(c) {\n  return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;\n}\nfunction isSingleDot(buffer) {\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\nfunction isDoubleDot(buffer) {\n  buffer = buffer.toLowerCase();\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\n}\nfunction isWindowsDriveLetterString(string) {\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\nfunction isNormalizedWindowsDriveLetterString(string) {\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\nfunction containsForbiddenHostCodePoint(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\n}\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\n}\nfunction isSpecialScheme(scheme) {\n  return specialSchemes[scheme] !== undefined;\n}\nfunction isSpecial(url) {\n  return isSpecialScheme(url.scheme);\n}\nfunction defaultPort(scheme) {\n  return specialSchemes[scheme];\n}\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n  return \"%\" + hex;\n}\nfunction utf8PercentEncode(c) {\n  const buf = new Buffer(c);\n  let str = \"\";\n  for (let i = 0; i < buf.length; ++i) {\n    str += percentEncode(buf[i]);\n  }\n  return str;\n}\nfunction utf8PercentDecode(str) {\n  const input = new Buffer(str);\n  const output = [];\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] !== 37) {\n      output.push(input[i]);\n    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {\n      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));\n      i += 2;\n    } else {\n      output.push(input[i]);\n    }\n  }\n  return new Buffer(output).toString();\n}\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\nconst extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);\nfunction isPathPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\nconst extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\nfunction percentEncodeChar(c, encodeSetPredicate) {\n  const cStr = String.fromCodePoint(c);\n  if (encodeSetPredicate(c)) {\n    return utf8PercentEncode(cStr);\n  }\n  return cStr;\n}\nfunction parseIPv4Number(input) {\n  let R = 10;\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n    input = input.substring(2);\n    R = 16;\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n    input = input.substring(1);\n    R = 8;\n  }\n  if (input === \"\") {\n    return 0;\n  }\n  const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;\n  if (regex.test(input)) {\n    return failure;\n  }\n  return parseInt(input, R);\n}\nfunction parseIPv4(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length > 1) {\n      parts.pop();\n    }\n  }\n  if (parts.length > 4) {\n    return input;\n  }\n  const numbers = [];\n  for (const part of parts) {\n    if (part === \"\") {\n      return input;\n    }\n    const n = parseIPv4Number(part);\n    if (n === failure) {\n      return input;\n    }\n    numbers.push(n);\n  }\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    if (numbers[i] > 255) {\n      return failure;\n    }\n  }\n  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {\n    return failure;\n  }\n  let ipv4 = numbers.pop();\n  let counter = 0;\n  for (const n of numbers) {\n    ipv4 += n * Math.pow(256, 3 - counter);\n    ++counter;\n  }\n  return ipv4;\n}\nfunction serializeIPv4(address) {\n  let output = \"\";\n  let n = address;\n  for (let i = 1; i <= 4; ++i) {\n    output = String(n % 256) + output;\n    if (i !== 4) {\n      output = \".\" + output;\n    }\n    n = Math.floor(n / 256);\n  }\n  return output;\n}\nfunction parseIPv6(input) {\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\n  let pieceIndex = 0;\n  let compress = null;\n  let pointer = 0;\n  input = punycode.ucs2.decode(input);\n  if (input[pointer] === 58) {\n    if (input[pointer + 1] !== 58) {\n      return failure;\n    }\n    pointer += 2;\n    ++pieceIndex;\n    compress = pieceIndex;\n  }\n  while (pointer < input.length) {\n    if (pieceIndex === 8) {\n      return failure;\n    }\n    if (input[pointer] === 58) {\n      if (compress !== null) {\n        return failure;\n      }\n      ++pointer;\n      ++pieceIndex;\n      compress = pieceIndex;\n      continue;\n    }\n    let value = 0;\n    let length = 0;\n    while (length < 4 && isASCIIHex(input[pointer])) {\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\n      ++pointer;\n      ++length;\n    }\n    if (input[pointer] === 46) {\n      if (length === 0) {\n        return failure;\n      }\n      pointer -= length;\n      if (pieceIndex > 6) {\n        return failure;\n      }\n      let numbersSeen = 0;\n      while (input[pointer] !== undefined) {\n        let ipv4Piece = null;\n        if (numbersSeen > 0) {\n          if (input[pointer] === 46 && numbersSeen < 4) {\n            ++pointer;\n          } else {\n            return failure;\n          }\n        }\n        if (!isASCIIDigit(input[pointer])) {\n          return failure;\n        }\n        while (isASCIIDigit(input[pointer])) {\n          const number = parseInt(at(input, pointer));\n          if (ipv4Piece === null) {\n            ipv4Piece = number;\n          } else if (ipv4Piece === 0) {\n            return failure;\n          } else {\n            ipv4Piece = ipv4Piece * 10 + number;\n          }\n          if (ipv4Piece > 255) {\n            return failure;\n          }\n          ++pointer;\n        }\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n        ++numbersSeen;\n        if (numbersSeen === 2 || numbersSeen === 4) {\n          ++pieceIndex;\n        }\n      }\n      if (numbersSeen !== 4) {\n        return failure;\n      }\n      break;\n    } else if (input[pointer] === 58) {\n      ++pointer;\n      if (input[pointer] === undefined) {\n        return failure;\n      }\n    } else if (input[pointer] !== undefined) {\n      return failure;\n    }\n    address[pieceIndex] = value;\n    ++pieceIndex;\n  }\n  if (compress !== null) {\n    let swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex !== 0 && swaps > 0) {\n      const temp = address[compress + swaps - 1];\n      address[compress + swaps - 1] = address[pieceIndex];\n      address[pieceIndex] = temp;\n      --pieceIndex;\n      --swaps;\n    }\n  } else if (compress === null && pieceIndex !== 8) {\n    return failure;\n  }\n  return address;\n}\nfunction serializeIPv6(address) {\n  let output = \"\";\n  const seqResult = findLongestZeroSequence(address);\n  const compress = seqResult.idx;\n  let ignore0 = false;\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\n    if (ignore0 && address[pieceIndex] === 0) {\n      continue;\n    } else if (ignore0) {\n      ignore0 = false;\n    }\n    if (compress === pieceIndex) {\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\n      output += separator;\n      ignore0 = true;\n      continue;\n    }\n    output += address[pieceIndex].toString(16);\n    if (pieceIndex !== 7) {\n      output += \":\";\n    }\n  }\n  return output;\n}\nfunction parseHost(input, isSpecialArg) {\n  if (input[0] === \"[\") {\n    if (input[input.length - 1] !== \"]\") {\n      return failure;\n    }\n    return parseIPv6(input.substring(1, input.length - 1));\n  }\n  if (!isSpecialArg) {\n    return parseOpaqueHost(input);\n  }\n  const domain = utf8PercentDecode(input);\n  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);\n  if (asciiDomain === null) {\n    return failure;\n  }\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\n    return failure;\n  }\n  const ipv4Host = parseIPv4(asciiDomain);\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\n    return ipv4Host;\n  }\n  return asciiDomain;\n}\nfunction parseOpaqueHost(input) {\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\n    return failure;\n  }\n  let output = \"\";\n  const decoded = punycode.ucs2.decode(input);\n  for (let i = 0; i < decoded.length; ++i) {\n    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);\n  }\n  return output;\n}\nfunction findLongestZeroSequence(arr) {\n  let maxIdx = null;\n  let maxLen = 1; // only find elements > 1\n  let currStart = null;\n  let currLen = 0;\n  for (let i = 0; i < arr.length; ++i) {\n    if (arr[i] !== 0) {\n      if (currLen > maxLen) {\n        maxIdx = currStart;\n        maxLen = currLen;\n      }\n      currStart = null;\n      currLen = 0;\n    } else {\n      if (currStart === null) {\n        currStart = i;\n      }\n      ++currLen;\n    }\n  }\n\n  // if trailing zeros\n  if (currLen > maxLen) {\n    maxIdx = currStart;\n    maxLen = currLen;\n  }\n  return {\n    idx: maxIdx,\n    len: maxLen\n  };\n}\nfunction serializeHost(host) {\n  if (typeof host === \"number\") {\n    return serializeIPv4(host);\n  }\n\n  // IPv6 serializer\n  if (host instanceof Array) {\n    return \"[\" + serializeIPv6(host) + \"]\";\n  }\n  return host;\n}\nfunction trimControlChars(url) {\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/g, \"\");\n}\nfunction trimTabAndNewline(url) {\n  return url.replace(/\\u0009|\\u000A|\\u000D/g, \"\");\n}\nfunction shortenPath(url) {\n  const path = url.path;\n  if (path.length === 0) {\n    return;\n  }\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n    return;\n  }\n  path.pop();\n}\nfunction includesCredentials(url) {\n  return url.username !== \"\" || url.password !== \"\";\n}\nfunction cannotHaveAUsernamePasswordPort(url) {\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\n}\nfunction isNormalizedWindowsDriveLetter(string) {\n  return /^[A-Za-z]:$/.test(string);\n}\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n  this.pointer = 0;\n  this.input = input;\n  this.base = base || null;\n  this.encodingOverride = encodingOverride || \"utf-8\";\n  this.stateOverride = stateOverride;\n  this.url = url;\n  this.failure = false;\n  this.parseError = false;\n  if (!this.url) {\n    this.url = {\n      scheme: \"\",\n      username: \"\",\n      password: \"\",\n      host: null,\n      port: null,\n      path: [],\n      query: null,\n      fragment: null,\n      cannotBeABaseURL: false\n    };\n    const res = trimControlChars(this.input);\n    if (res !== this.input) {\n      this.parseError = true;\n    }\n    this.input = res;\n  }\n  const res = trimTabAndNewline(this.input);\n  if (res !== this.input) {\n    this.parseError = true;\n  }\n  this.input = res;\n  this.state = stateOverride || \"scheme start\";\n  this.buffer = \"\";\n  this.atFlag = false;\n  this.arrFlag = false;\n  this.passwordTokenSeenFlag = false;\n  this.input = punycode.ucs2.decode(this.input);\n  for (; this.pointer <= this.input.length; ++this.pointer) {\n    const c = this.input[this.pointer];\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n\n    // exec state machine\n    const ret = this[\"parse \" + this.state](c, cStr);\n    if (!ret) {\n      break; // terminate algorithm\n    } else if (ret === failure) {\n      this.failure = true;\n      break;\n    }\n  }\n}\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n  if (isASCIIAlpha(c)) {\n    this.buffer += cStr.toLowerCase();\n    this.state = \"scheme\";\n  } else if (!this.stateOverride) {\n    this.state = \"no scheme\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\n    this.buffer += cStr.toLowerCase();\n  } else if (c === 58) {\n    if (this.stateOverride) {\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n        return false;\n      }\n      if (this.url.scheme === \"file\" && (this.url.host === \"\" || this.url.host === null)) {\n        return false;\n      }\n    }\n    this.url.scheme = this.buffer;\n    this.buffer = \"\";\n    if (this.stateOverride) {\n      return false;\n    }\n    if (this.url.scheme === \"file\") {\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\n        this.parseError = true;\n      }\n      this.state = \"file\";\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n      this.state = \"special relative or authority\";\n    } else if (isSpecial(this.url)) {\n      this.state = \"special authority slashes\";\n    } else if (this.input[this.pointer + 1] === 47) {\n      this.state = \"path or authority\";\n      ++this.pointer;\n    } else {\n      this.url.cannotBeABaseURL = true;\n      this.url.path.push(\"\");\n      this.state = \"cannot-be-a-base-URL path\";\n    }\n  } else if (!this.stateOverride) {\n    this.buffer = \"\";\n    this.state = \"no scheme\";\n    this.pointer = -1;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n  if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {\n    return failure;\n  } else if (this.base.cannotBeABaseURL && c === 35) {\n    this.url.scheme = this.base.scheme;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.url.cannotBeABaseURL = true;\n    this.state = \"fragment\";\n  } else if (this.base.scheme === \"file\") {\n    this.state = \"file\";\n    --this.pointer;\n  } else {\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n  if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n  this.url.scheme = this.base.scheme;\n  if (isNaN(c)) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n  } else if (c === 47) {\n    this.state = \"relative slash\";\n  } else if (c === 63) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === 35) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (isSpecial(this.url) && c === 92) {\n    this.parseError = true;\n    this.state = \"relative slash\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice(0, this.base.path.length - 1);\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"special authority ignore slashes\";\n  } else if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"special authority ignore slashes\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n  if (c !== 47 && c !== 92) {\n    this.state = \"authority\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n  if (c === 64) {\n    this.parseError = true;\n    if (this.atFlag) {\n      this.buffer = \"%40\" + this.buffer;\n    }\n    this.atFlag = true;\n\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n    const len = countSymbols(this.buffer);\n    for (let pointer = 0; pointer < len; ++pointer) {\n      const codePoint = this.buffer.codePointAt(pointer);\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\n        this.passwordTokenSeenFlag = true;\n        continue;\n      }\n      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);\n      if (this.passwordTokenSeenFlag) {\n        this.url.password += encodedCodePoints;\n      } else {\n        this.url.username += encodedCodePoints;\n      }\n    }\n    this.buffer = \"\";\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    if (this.atFlag && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    this.pointer -= countSymbols(this.buffer) + 1;\n    this.buffer = \"\";\n    this.state = \"host\";\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse hostname\"] = URLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n  if (this.stateOverride && this.url.scheme === \"file\") {\n    --this.pointer;\n    this.state = \"file host\";\n  } else if (c === 58 && !this.arrFlag) {\n    if (this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    const host = parseHost(this.buffer, isSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"port\";\n    if (this.stateOverride === \"hostname\") {\n      return false;\n    }\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    --this.pointer;\n    if (isSpecial(this.url) && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    } else if (this.stateOverride && this.buffer === \"\" && (includesCredentials(this.url) || this.url.port !== null)) {\n      this.parseError = true;\n      return false;\n    }\n    const host = parseHost(this.buffer, isSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"path start\";\n    if (this.stateOverride) {\n      return false;\n    }\n  } else {\n    if (c === 91) {\n      this.arrFlag = true;\n    } else if (c === 93) {\n      this.arrFlag = false;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n  if (isASCIIDigit(c)) {\n    this.buffer += cStr;\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {\n    if (this.buffer !== \"\") {\n      const port = parseInt(this.buffer);\n      if (port > Math.pow(2, 16) - 1) {\n        this.parseError = true;\n        return failure;\n      }\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n      this.buffer = \"\";\n    }\n    if (this.stateOverride) {\n      return false;\n    }\n    this.state = \"path start\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n  this.url.scheme = \"file\";\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file slash\";\n  } else if (this.base !== null && this.base.scheme === \"file\") {\n    if (isNaN(c)) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = this.base.query;\n    } else if (c === 63) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === 35) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = this.base.query;\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else {\n      if (this.input.length - this.pointer - 1 === 0 ||\n      // remaining consists of 0 code points\n      !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 &&\n      // remaining has at least 2 code points\n      !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {\n        this.url.host = this.base.host;\n        this.url.path = this.base.path.slice();\n        shortenPath(this.url);\n      } else {\n        this.parseError = true;\n      }\n      this.state = \"path\";\n      --this.pointer;\n    }\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file host\";\n  } else {\n    if (this.base !== null && this.base.scheme === \"file\") {\n      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n        this.url.path.push(this.base.path[0]);\n      } else {\n        this.url.host = this.base.host;\n      }\n    }\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\n    --this.pointer;\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n      this.parseError = true;\n      this.state = \"path\";\n    } else if (this.buffer === \"\") {\n      this.url.host = \"\";\n      if (this.stateOverride) {\n        return false;\n      }\n      this.state = \"path start\";\n    } else {\n      let host = parseHost(this.buffer, isSpecial(this.url));\n      if (host === failure) {\n        return failure;\n      }\n      if (host === \"localhost\") {\n        host = \"\";\n      }\n      this.url.host = host;\n      if (this.stateOverride) {\n        return false;\n      }\n      this.buffer = \"\";\n      this.state = \"path start\";\n    }\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n  if (isSpecial(this.url)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"path\";\n    if (c !== 47 && c !== 92) {\n      --this.pointer;\n    }\n  } else if (!this.stateOverride && c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (!this.stateOverride && c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c !== undefined) {\n    this.state = \"path\";\n    if (c !== 47) {\n      --this.pointer;\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n  if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {\n    if (isSpecial(this.url) && c === 92) {\n      this.parseError = true;\n    }\n    if (isDoubleDot(this.buffer)) {\n      shortenPath(this.url);\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\n        this.url.path.push(\"\");\n      }\n    } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {\n      this.url.path.push(\"\");\n    } else if (!isSingleDot(this.buffer)) {\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n        if (this.url.host !== \"\" && this.url.host !== null) {\n          this.parseError = true;\n          this.url.host = \"\";\n        }\n        this.buffer = this.buffer[0] + \":\";\n      }\n      this.url.path.push(this.buffer);\n    }\n    this.buffer = \"\";\n    if (this.url.scheme === \"file\" && (c === undefined || c === 63 || c === 35)) {\n      while (this.url.path.length > 1 && this.url.path[0] === \"\") {\n        this.parseError = true;\n        this.url.path.shift();\n      }\n    }\n    if (c === 63) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    }\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += percentEncodeChar(c, isPathPercentEncode);\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\n  if (c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else {\n    // TODO: Add: not a URL code point\n    if (!isNaN(c) && c !== 37) {\n      this.parseError = true;\n    }\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    if (!isNaN(c)) {\n      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n  if (isNaN(c) || !this.stateOverride && c === 35) {\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n      this.encodingOverride = \"utf-8\";\n    }\n    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead\n    for (let i = 0; i < buffer.length; ++i) {\n      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E) {\n        this.url.query += percentEncode(buffer[i]);\n      } else {\n        this.url.query += String.fromCodePoint(buffer[i]);\n      }\n    }\n    this.buffer = \"\";\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n  if (isNaN(c)) {// do nothing\n  } else if (c === 0x0) {\n    this.parseError = true;\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);\n  }\n  return true;\n};\nfunction serializeURL(url, excludeFragment) {\n  let output = url.scheme + \":\";\n  if (url.host !== null) {\n    output += \"//\";\n    if (url.username !== \"\" || url.password !== \"\") {\n      output += url.username;\n      if (url.password !== \"\") {\n        output += \":\" + url.password;\n      }\n      output += \"@\";\n    }\n    output += serializeHost(url.host);\n    if (url.port !== null) {\n      output += \":\" + url.port;\n    }\n  } else if (url.host === null && url.scheme === \"file\") {\n    output += \"//\";\n  }\n  if (url.cannotBeABaseURL) {\n    output += url.path[0];\n  } else {\n    for (const string of url.path) {\n      output += \"/\" + string;\n    }\n  }\n  if (url.query !== null) {\n    output += \"?\" + url.query;\n  }\n  if (!excludeFragment && url.fragment !== null) {\n    output += \"#\" + url.fragment;\n  }\n  return output;\n}\nfunction serializeOrigin(tuple) {\n  let result = tuple.scheme + \"://\";\n  result += serializeHost(tuple.host);\n  if (tuple.port !== null) {\n    result += \":\" + tuple.port;\n  }\n  return result;\n}\nmodule.exports.serializeURL = serializeURL;\nmodule.exports.serializeURLOrigin = function (url) {\n  // https://url.spec.whatwg.org/#concept-url-origin\n  switch (url.scheme) {\n    case \"blob\":\n      try {\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\n      } catch (e) {\n        // serializing an opaque origin returns \"null\"\n        return \"null\";\n      }\n    case \"ftp\":\n    case \"gopher\":\n    case \"http\":\n    case \"https\":\n    case \"ws\":\n    case \"wss\":\n      return serializeOrigin({\n        scheme: url.scheme,\n        host: url.host,\n        port: url.port\n      });\n    case \"file\":\n      // spec says \"exercise to the reader\", chrome says \"file://\"\n      return \"file://\";\n    default:\n      // serializing an opaque origin returns \"null\"\n      return \"null\";\n  }\n};\nmodule.exports.basicURLParse = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n  if (usm.failure) {\n    return \"failure\";\n  }\n  return usm.url;\n};\nmodule.exports.setTheUsername = function (url, username) {\n  url.username = \"\";\n  const decoded = punycode.ucs2.decode(username);\n  for (let i = 0; i < decoded.length; ++i) {\n    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\n  }\n};\nmodule.exports.setThePassword = function (url, password) {\n  url.password = \"\";\n  const decoded = punycode.ucs2.decode(password);\n  for (let i = 0; i < decoded.length; ++i) {\n    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\n  }\n};\nmodule.exports.serializeHost = serializeHost;\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\nmodule.exports.serializeInteger = function (integer) {\n  return String(integer);\n};\nmodule.exports.parseURL = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  // We don't handle blobs, so this just delegates:\n  return module.exports.basicURLParse(input, {\n    baseURL: options.baseURL,\n    encodingOverride: options.encodingOverride\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/whatwg-url/lib/utils.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports.mixin = function mixin(target, source) {\n  const keys = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\nmodule.exports.wrapperSymbol = Symbol(\"wrapper\");\nmodule.exports.implSymbol = Symbol(\"impl\");\nmodule.exports.wrapperForImpl = function (impl) {\n  return impl[module.exports.wrapperSymbol];\n};\nmodule.exports.implForWrapper = function (wrapper) {\n  return wrapper[module.exports.implSymbol];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLG9CQUFvQixHQUFHLFNBQVNFLEtBQUtBLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO0VBQ3BELE1BQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxtQkFBbUIsQ0FBQ0gsTUFBTSxDQUFDO0VBQy9DLEtBQUssSUFBSUksQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxJQUFJLENBQUNJLE1BQU0sRUFBRSxFQUFFRCxDQUFDLEVBQUU7SUFDcENGLE1BQU0sQ0FBQ0ksY0FBYyxDQUFDUCxNQUFNLEVBQUVFLElBQUksQ0FBQ0csQ0FBQyxDQUFDLEVBQUVGLE1BQU0sQ0FBQ0ssd0JBQXdCLENBQUNQLE1BQU0sRUFBRUMsSUFBSSxDQUFDRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFGO0FBQ0YsQ0FBQztBQUVEUiw0QkFBNEIsR0FBR2EsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNoRGIseUJBQXlCLEdBQUdhLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFFMUNiLDZCQUE2QixHQUFHLFVBQVVnQixJQUFJLEVBQUU7RUFDOUMsT0FBT0EsSUFBSSxDQUFDaEIsTUFBTSxDQUFDQyxPQUFPLENBQUNXLGFBQWEsQ0FBQztBQUMzQyxDQUFDO0FBRURaLDZCQUE2QixHQUFHLFVBQVVrQixPQUFPLEVBQUU7RUFDakQsT0FBT0EsT0FBTyxDQUFDbEIsTUFBTSxDQUFDQyxPQUFPLENBQUNhLFVBQVUsQ0FBQztBQUMzQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3N0YXRlLWNhdGFseXN0Ly4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL3V0aWxzLmpzP2E1MzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzLm1peGluID0gZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCBzb3VyY2UpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleXNbaV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXlzW2ldKSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLndyYXBwZXJTeW1ib2wgPSBTeW1ib2woXCJ3cmFwcGVyXCIpO1xubW9kdWxlLmV4cG9ydHMuaW1wbFN5bWJvbCA9IFN5bWJvbChcImltcGxcIik7XG5cbm1vZHVsZS5leHBvcnRzLndyYXBwZXJGb3JJbXBsID0gZnVuY3Rpb24gKGltcGwpIHtcbiAgcmV0dXJuIGltcGxbbW9kdWxlLmV4cG9ydHMud3JhcHBlclN5bWJvbF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pbXBsRm9yV3JhcHBlciA9IGZ1bmN0aW9uICh3cmFwcGVyKSB7XG4gIHJldHVybiB3cmFwcGVyW21vZHVsZS5leHBvcnRzLmltcGxTeW1ib2xdO1xufTtcblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtaXhpbiIsInRhcmdldCIsInNvdXJjZSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaSIsImxlbmd0aCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlclN5bWJvbCIsIlN5bWJvbCIsImltcGxTeW1ib2wiLCJ3cmFwcGVyRm9ySW1wbCIsImltcGwiLCJpbXBsRm9yV3JhcHBlciIsIndyYXBwZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/whatwg-url/lib/URL-impl.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL-impl.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst usm = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\");\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n    const parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n  }\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", {\n      url: this._url,\n      stateOverride: \"scheme start\"\n    });\n  }\n  get username() {\n    return this._url.username;\n  }\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setTheUsername(this._url, v);\n  }\n  get password() {\n    return this._url.password;\n  }\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setThePassword(this._url, v);\n  }\n  get host() {\n    const url = this._url;\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"host\"\n    });\n  }\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n    return usm.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"hostname\"\n    });\n  }\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n    return usm.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"port\"\n      });\n    }\n  }\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n    return \"/\" + this._url.path.join(\"/\");\n  }\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    this._url.path = [];\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"path start\"\n    });\n  }\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, {\n      url,\n      stateOverride: \"query\"\n    });\n  }\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, {\n      url: this._url,\n      stateOverride: \"fragment\"\n    });\n  }\n  toJSON() {\n    return this.href;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/whatwg-url/lib/URL-impl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/whatwg-url/lib/URL.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(rsc)/./node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/whatwg-url/lib/utils.js\");\nconst Impl = __webpack_require__(/*! .//URL-impl.js */ \"(rsc)/./node_modules/whatwg-url/lib/URL-impl.js\");\nconst impl = utils.implSymbol;\nfunction URL(url) {\n  if (!this || this[impl] || !(this instanceof URL)) {\n    throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.\");\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 2; ++i) {\n    args[i] = arguments[i];\n  }\n  args[0] = conversions[\"USVString\"](args[0]);\n  if (args[1] !== undefined) {\n    args[1] = conversions[\"USVString\"](args[1]);\n  }\n  module.exports.setup(this, args);\n}\nURL.prototype.toJSON = function toJSON() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 0; ++i) {\n    args[i] = arguments[i];\n  }\n  return this[impl].toJSON.apply(this[impl], args);\n};\nObject.defineProperty(URL.prototype, \"href\", {\n  get() {\n    return this[impl].href;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].href = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nURL.prototype.toString = function () {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  return this.href;\n};\nObject.defineProperty(URL.prototype, \"origin\", {\n  get() {\n    return this[impl].origin;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"protocol\", {\n  get() {\n    return this[impl].protocol;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].protocol = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"username\", {\n  get() {\n    return this[impl].username;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].username = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"password\", {\n  get() {\n    return this[impl].password;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].password = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"host\", {\n  get() {\n    return this[impl].host;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].host = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"hostname\", {\n  get() {\n    return this[impl].hostname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hostname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"port\", {\n  get() {\n    return this[impl].port;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].port = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"pathname\", {\n  get() {\n    return this[impl].pathname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].pathname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"search\", {\n  get() {\n    return this[impl].search;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].search = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"hash\", {\n  get() {\n    return this[impl].hash;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hash = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: URL,\n  expose: {\n    Window: {\n      URL: URL\n    },\n    Worker: {\n      URL: URL\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/whatwg-url/lib/URL.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/whatwg-url/lib/public-api.js":
/*!***************************************************!*\
  !*** ./node_modules/whatwg-url/lib/public-api.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nexports.URL = __webpack_require__(/*! ./URL */ \"(rsc)/./node_modules/whatwg-url/lib/URL.js\")[\"interface\"];\nexports.serializeURL = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeURL;\nexports.serializeURLOrigin = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeURLOrigin;\nexports.basicURLParse = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").basicURLParse;\nexports.setTheUsername = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").setTheUsername;\nexports.setThePassword = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").setThePassword;\nexports.serializeHost = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeHost;\nexports.serializeInteger = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").serializeInteger;\nexports.parseURL = __webpack_require__(/*! ./url-state-machine */ \"(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\").parseURL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvcHVibGljLWFwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEseUdBQXdDO0FBQ3hDQSw4SUFBa0U7QUFDbEVBLDBKQUE4RTtBQUM5RUEsZ0pBQW9FO0FBQ3BFQSxrSkFBc0U7QUFDdEVBLGtKQUFzRTtBQUN0RUEsZ0pBQW9FO0FBQ3BFQSxzSkFBMEU7QUFDMUVBLHNJQUEwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3dzdGF0ZS1jYXRhbHlzdC8uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi9wdWJsaWMtYXBpLmpzPzJkODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuVVJMID0gcmVxdWlyZShcIi4vVVJMXCIpLmludGVyZmFjZTtcbmV4cG9ydHMuc2VyaWFsaXplVVJMID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2VyaWFsaXplVVJMO1xuZXhwb3J0cy5zZXJpYWxpemVVUkxPcmlnaW4gPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXJpYWxpemVVUkxPcmlnaW47XG5leHBvcnRzLmJhc2ljVVJMUGFyc2UgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5iYXNpY1VSTFBhcnNlO1xuZXhwb3J0cy5zZXRUaGVVc2VybmFtZSA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNldFRoZVVzZXJuYW1lO1xuZXhwb3J0cy5zZXRUaGVQYXNzd29yZCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNldFRoZVBhc3N3b3JkO1xuZXhwb3J0cy5zZXJpYWxpemVIb3N0ID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2VyaWFsaXplSG9zdDtcbmV4cG9ydHMuc2VyaWFsaXplSW50ZWdlciA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNlcmlhbGl6ZUludGVnZXI7XG5leHBvcnRzLnBhcnNlVVJMID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikucGFyc2VVUkw7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsIlVSTCIsInJlcXVpcmUiLCJpbnRlcmZhY2UiLCJzZXJpYWxpemVVUkwiLCJzZXJpYWxpemVVUkxPcmlnaW4iLCJiYXNpY1VSTFBhcnNlIiwic2V0VGhlVXNlcm5hbWUiLCJzZXRUaGVQYXNzd29yZCIsInNlcmlhbGl6ZUhvc3QiLCJzZXJpYWxpemVJbnRlZ2VyIiwicGFyc2VVUkwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/whatwg-url/lib/public-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js":
/*!**********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/url-state-machine.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\nconst tr46 = __webpack_require__(/*! tr46 */ \"(rsc)/./node_modules/tr46/index.js\");\nconst specialSchemes = {\n  ftp: 21,\n  file: null,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\nconst failure = Symbol(\"failure\");\nfunction countSymbols(str) {\n  return punycode.ucs2.decode(str).length;\n}\nfunction at(input, idx) {\n  const c = input[idx];\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\nfunction isASCIIDigit(c) {\n  return c >= 0x30 && c <= 0x39;\n}\nfunction isASCIIAlpha(c) {\n  return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;\n}\nfunction isASCIIAlphanumeric(c) {\n  return isASCIIAlpha(c) || isASCIIDigit(c);\n}\nfunction isASCIIHex(c) {\n  return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;\n}\nfunction isSingleDot(buffer) {\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\nfunction isDoubleDot(buffer) {\n  buffer = buffer.toLowerCase();\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\n}\nfunction isWindowsDriveLetterString(string) {\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\nfunction isNormalizedWindowsDriveLetterString(string) {\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\nfunction containsForbiddenHostCodePoint(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\n}\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\n}\nfunction isSpecialScheme(scheme) {\n  return specialSchemes[scheme] !== undefined;\n}\nfunction isSpecial(url) {\n  return isSpecialScheme(url.scheme);\n}\nfunction defaultPort(scheme) {\n  return specialSchemes[scheme];\n}\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n  return \"%\" + hex;\n}\nfunction utf8PercentEncode(c) {\n  const buf = new Buffer(c);\n  let str = \"\";\n  for (let i = 0; i < buf.length; ++i) {\n    str += percentEncode(buf[i]);\n  }\n  return str;\n}\nfunction utf8PercentDecode(str) {\n  const input = new Buffer(str);\n  const output = [];\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] !== 37) {\n      output.push(input[i]);\n    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {\n      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));\n      i += 2;\n    } else {\n      output.push(input[i]);\n    }\n  }\n  return new Buffer(output).toString();\n}\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\nconst extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);\nfunction isPathPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\nconst extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\nfunction percentEncodeChar(c, encodeSetPredicate) {\n  const cStr = String.fromCodePoint(c);\n  if (encodeSetPredicate(c)) {\n    return utf8PercentEncode(cStr);\n  }\n  return cStr;\n}\nfunction parseIPv4Number(input) {\n  let R = 10;\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n    input = input.substring(2);\n    R = 16;\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n    input = input.substring(1);\n    R = 8;\n  }\n  if (input === \"\") {\n    return 0;\n  }\n  const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;\n  if (regex.test(input)) {\n    return failure;\n  }\n  return parseInt(input, R);\n}\nfunction parseIPv4(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length > 1) {\n      parts.pop();\n    }\n  }\n  if (parts.length > 4) {\n    return input;\n  }\n  const numbers = [];\n  for (const part of parts) {\n    if (part === \"\") {\n      return input;\n    }\n    const n = parseIPv4Number(part);\n    if (n === failure) {\n      return input;\n    }\n    numbers.push(n);\n  }\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    if (numbers[i] > 255) {\n      return failure;\n    }\n  }\n  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {\n    return failure;\n  }\n  let ipv4 = numbers.pop();\n  let counter = 0;\n  for (const n of numbers) {\n    ipv4 += n * Math.pow(256, 3 - counter);\n    ++counter;\n  }\n  return ipv4;\n}\nfunction serializeIPv4(address) {\n  let output = \"\";\n  let n = address;\n  for (let i = 1; i <= 4; ++i) {\n    output = String(n % 256) + output;\n    if (i !== 4) {\n      output = \".\" + output;\n    }\n    n = Math.floor(n / 256);\n  }\n  return output;\n}\nfunction parseIPv6(input) {\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\n  let pieceIndex = 0;\n  let compress = null;\n  let pointer = 0;\n  input = punycode.ucs2.decode(input);\n  if (input[pointer] === 58) {\n    if (input[pointer + 1] !== 58) {\n      return failure;\n    }\n    pointer += 2;\n    ++pieceIndex;\n    compress = pieceIndex;\n  }\n  while (pointer < input.length) {\n    if (pieceIndex === 8) {\n      return failure;\n    }\n    if (input[pointer] === 58) {\n      if (compress !== null) {\n        return failure;\n      }\n      ++pointer;\n      ++pieceIndex;\n      compress = pieceIndex;\n      continue;\n    }\n    let value = 0;\n    let length = 0;\n    while (length < 4 && isASCIIHex(input[pointer])) {\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\n      ++pointer;\n      ++length;\n    }\n    if (input[pointer] === 46) {\n      if (length === 0) {\n        return failure;\n      }\n      pointer -= length;\n      if (pieceIndex > 6) {\n        return failure;\n      }\n      let numbersSeen = 0;\n      while (input[pointer] !== undefined) {\n        let ipv4Piece = null;\n        if (numbersSeen > 0) {\n          if (input[pointer] === 46 && numbersSeen < 4) {\n            ++pointer;\n          } else {\n            return failure;\n          }\n        }\n        if (!isASCIIDigit(input[pointer])) {\n          return failure;\n        }\n        while (isASCIIDigit(input[pointer])) {\n          const number = parseInt(at(input, pointer));\n          if (ipv4Piece === null) {\n            ipv4Piece = number;\n          } else if (ipv4Piece === 0) {\n            return failure;\n          } else {\n            ipv4Piece = ipv4Piece * 10 + number;\n          }\n          if (ipv4Piece > 255) {\n            return failure;\n          }\n          ++pointer;\n        }\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n        ++numbersSeen;\n        if (numbersSeen === 2 || numbersSeen === 4) {\n          ++pieceIndex;\n        }\n      }\n      if (numbersSeen !== 4) {\n        return failure;\n      }\n      break;\n    } else if (input[pointer] === 58) {\n      ++pointer;\n      if (input[pointer] === undefined) {\n        return failure;\n      }\n    } else if (input[pointer] !== undefined) {\n      return failure;\n    }\n    address[pieceIndex] = value;\n    ++pieceIndex;\n  }\n  if (compress !== null) {\n    let swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex !== 0 && swaps > 0) {\n      const temp = address[compress + swaps - 1];\n      address[compress + swaps - 1] = address[pieceIndex];\n      address[pieceIndex] = temp;\n      --pieceIndex;\n      --swaps;\n    }\n  } else if (compress === null && pieceIndex !== 8) {\n    return failure;\n  }\n  return address;\n}\nfunction serializeIPv6(address) {\n  let output = \"\";\n  const seqResult = findLongestZeroSequence(address);\n  const compress = seqResult.idx;\n  let ignore0 = false;\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\n    if (ignore0 && address[pieceIndex] === 0) {\n      continue;\n    } else if (ignore0) {\n      ignore0 = false;\n    }\n    if (compress === pieceIndex) {\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\n      output += separator;\n      ignore0 = true;\n      continue;\n    }\n    output += address[pieceIndex].toString(16);\n    if (pieceIndex !== 7) {\n      output += \":\";\n    }\n  }\n  return output;\n}\nfunction parseHost(input, isSpecialArg) {\n  if (input[0] === \"[\") {\n    if (input[input.length - 1] !== \"]\") {\n      return failure;\n    }\n    return parseIPv6(input.substring(1, input.length - 1));\n  }\n  if (!isSpecialArg) {\n    return parseOpaqueHost(input);\n  }\n  const domain = utf8PercentDecode(input);\n  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);\n  if (asciiDomain === null) {\n    return failure;\n  }\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\n    return failure;\n  }\n  const ipv4Host = parseIPv4(asciiDomain);\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\n    return ipv4Host;\n  }\n  return asciiDomain;\n}\nfunction parseOpaqueHost(input) {\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\n    return failure;\n  }\n  let output = \"\";\n  const decoded = punycode.ucs2.decode(input);\n  for (let i = 0; i < decoded.length; ++i) {\n    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);\n  }\n  return output;\n}\nfunction findLongestZeroSequence(arr) {\n  let maxIdx = null;\n  let maxLen = 1; // only find elements > 1\n  let currStart = null;\n  let currLen = 0;\n  for (let i = 0; i < arr.length; ++i) {\n    if (arr[i] !== 0) {\n      if (currLen > maxLen) {\n        maxIdx = currStart;\n        maxLen = currLen;\n      }\n      currStart = null;\n      currLen = 0;\n    } else {\n      if (currStart === null) {\n        currStart = i;\n      }\n      ++currLen;\n    }\n  }\n\n  // if trailing zeros\n  if (currLen > maxLen) {\n    maxIdx = currStart;\n    maxLen = currLen;\n  }\n  return {\n    idx: maxIdx,\n    len: maxLen\n  };\n}\nfunction serializeHost(host) {\n  if (typeof host === \"number\") {\n    return serializeIPv4(host);\n  }\n\n  // IPv6 serializer\n  if (host instanceof Array) {\n    return \"[\" + serializeIPv6(host) + \"]\";\n  }\n  return host;\n}\nfunction trimControlChars(url) {\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/g, \"\");\n}\nfunction trimTabAndNewline(url) {\n  return url.replace(/\\u0009|\\u000A|\\u000D/g, \"\");\n}\nfunction shortenPath(url) {\n  const path = url.path;\n  if (path.length === 0) {\n    return;\n  }\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n    return;\n  }\n  path.pop();\n}\nfunction includesCredentials(url) {\n  return url.username !== \"\" || url.password !== \"\";\n}\nfunction cannotHaveAUsernamePasswordPort(url) {\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\n}\nfunction isNormalizedWindowsDriveLetter(string) {\n  return /^[A-Za-z]:$/.test(string);\n}\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n  this.pointer = 0;\n  this.input = input;\n  this.base = base || null;\n  this.encodingOverride = encodingOverride || \"utf-8\";\n  this.stateOverride = stateOverride;\n  this.url = url;\n  this.failure = false;\n  this.parseError = false;\n  if (!this.url) {\n    this.url = {\n      scheme: \"\",\n      username: \"\",\n      password: \"\",\n      host: null,\n      port: null,\n      path: [],\n      query: null,\n      fragment: null,\n      cannotBeABaseURL: false\n    };\n    const res = trimControlChars(this.input);\n    if (res !== this.input) {\n      this.parseError = true;\n    }\n    this.input = res;\n  }\n  const res = trimTabAndNewline(this.input);\n  if (res !== this.input) {\n    this.parseError = true;\n  }\n  this.input = res;\n  this.state = stateOverride || \"scheme start\";\n  this.buffer = \"\";\n  this.atFlag = false;\n  this.arrFlag = false;\n  this.passwordTokenSeenFlag = false;\n  this.input = punycode.ucs2.decode(this.input);\n  for (; this.pointer <= this.input.length; ++this.pointer) {\n    const c = this.input[this.pointer];\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n\n    // exec state machine\n    const ret = this[\"parse \" + this.state](c, cStr);\n    if (!ret) {\n      break; // terminate algorithm\n    } else if (ret === failure) {\n      this.failure = true;\n      break;\n    }\n  }\n}\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n  if (isASCIIAlpha(c)) {\n    this.buffer += cStr.toLowerCase();\n    this.state = \"scheme\";\n  } else if (!this.stateOverride) {\n    this.state = \"no scheme\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\n    this.buffer += cStr.toLowerCase();\n  } else if (c === 58) {\n    if (this.stateOverride) {\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n        return false;\n      }\n      if (this.url.scheme === \"file\" && (this.url.host === \"\" || this.url.host === null)) {\n        return false;\n      }\n    }\n    this.url.scheme = this.buffer;\n    this.buffer = \"\";\n    if (this.stateOverride) {\n      return false;\n    }\n    if (this.url.scheme === \"file\") {\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\n        this.parseError = true;\n      }\n      this.state = \"file\";\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n      this.state = \"special relative or authority\";\n    } else if (isSpecial(this.url)) {\n      this.state = \"special authority slashes\";\n    } else if (this.input[this.pointer + 1] === 47) {\n      this.state = \"path or authority\";\n      ++this.pointer;\n    } else {\n      this.url.cannotBeABaseURL = true;\n      this.url.path.push(\"\");\n      this.state = \"cannot-be-a-base-URL path\";\n    }\n  } else if (!this.stateOverride) {\n    this.buffer = \"\";\n    this.state = \"no scheme\";\n    this.pointer = -1;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n  if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {\n    return failure;\n  } else if (this.base.cannotBeABaseURL && c === 35) {\n    this.url.scheme = this.base.scheme;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.url.cannotBeABaseURL = true;\n    this.state = \"fragment\";\n  } else if (this.base.scheme === \"file\") {\n    this.state = \"file\";\n    --this.pointer;\n  } else {\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n  if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n  this.url.scheme = this.base.scheme;\n  if (isNaN(c)) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n  } else if (c === 47) {\n    this.state = \"relative slash\";\n  } else if (c === 63) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === 35) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (isSpecial(this.url) && c === 92) {\n    this.parseError = true;\n    this.state = \"relative slash\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice(0, this.base.path.length - 1);\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"special authority ignore slashes\";\n  } else if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"special authority ignore slashes\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n  if (c !== 47 && c !== 92) {\n    this.state = \"authority\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n  if (c === 64) {\n    this.parseError = true;\n    if (this.atFlag) {\n      this.buffer = \"%40\" + this.buffer;\n    }\n    this.atFlag = true;\n\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n    const len = countSymbols(this.buffer);\n    for (let pointer = 0; pointer < len; ++pointer) {\n      const codePoint = this.buffer.codePointAt(pointer);\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\n        this.passwordTokenSeenFlag = true;\n        continue;\n      }\n      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);\n      if (this.passwordTokenSeenFlag) {\n        this.url.password += encodedCodePoints;\n      } else {\n        this.url.username += encodedCodePoints;\n      }\n    }\n    this.buffer = \"\";\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    if (this.atFlag && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    this.pointer -= countSymbols(this.buffer) + 1;\n    this.buffer = \"\";\n    this.state = \"host\";\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse hostname\"] = URLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n  if (this.stateOverride && this.url.scheme === \"file\") {\n    --this.pointer;\n    this.state = \"file host\";\n  } else if (c === 58 && !this.arrFlag) {\n    if (this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    const host = parseHost(this.buffer, isSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"port\";\n    if (this.stateOverride === \"hostname\") {\n      return false;\n    }\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    --this.pointer;\n    if (isSpecial(this.url) && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    } else if (this.stateOverride && this.buffer === \"\" && (includesCredentials(this.url) || this.url.port !== null)) {\n      this.parseError = true;\n      return false;\n    }\n    const host = parseHost(this.buffer, isSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"path start\";\n    if (this.stateOverride) {\n      return false;\n    }\n  } else {\n    if (c === 91) {\n      this.arrFlag = true;\n    } else if (c === 93) {\n      this.arrFlag = false;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n  if (isASCIIDigit(c)) {\n    this.buffer += cStr;\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {\n    if (this.buffer !== \"\") {\n      const port = parseInt(this.buffer);\n      if (port > Math.pow(2, 16) - 1) {\n        this.parseError = true;\n        return failure;\n      }\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n      this.buffer = \"\";\n    }\n    if (this.stateOverride) {\n      return false;\n    }\n    this.state = \"path start\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n  this.url.scheme = \"file\";\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file slash\";\n  } else if (this.base !== null && this.base.scheme === \"file\") {\n    if (isNaN(c)) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = this.base.query;\n    } else if (c === 63) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === 35) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = this.base.query;\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else {\n      if (this.input.length - this.pointer - 1 === 0 ||\n      // remaining consists of 0 code points\n      !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 &&\n      // remaining has at least 2 code points\n      !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {\n        this.url.host = this.base.host;\n        this.url.path = this.base.path.slice();\n        shortenPath(this.url);\n      } else {\n        this.parseError = true;\n      }\n      this.state = \"path\";\n      --this.pointer;\n    }\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file host\";\n  } else {\n    if (this.base !== null && this.base.scheme === \"file\") {\n      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n        this.url.path.push(this.base.path[0]);\n      } else {\n        this.url.host = this.base.host;\n      }\n    }\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\n    --this.pointer;\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n      this.parseError = true;\n      this.state = \"path\";\n    } else if (this.buffer === \"\") {\n      this.url.host = \"\";\n      if (this.stateOverride) {\n        return false;\n      }\n      this.state = \"path start\";\n    } else {\n      let host = parseHost(this.buffer, isSpecial(this.url));\n      if (host === failure) {\n        return failure;\n      }\n      if (host === \"localhost\") {\n        host = \"\";\n      }\n      this.url.host = host;\n      if (this.stateOverride) {\n        return false;\n      }\n      this.buffer = \"\";\n      this.state = \"path start\";\n    }\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n  if (isSpecial(this.url)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"path\";\n    if (c !== 47 && c !== 92) {\n      --this.pointer;\n    }\n  } else if (!this.stateOverride && c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (!this.stateOverride && c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c !== undefined) {\n    this.state = \"path\";\n    if (c !== 47) {\n      --this.pointer;\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n  if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {\n    if (isSpecial(this.url) && c === 92) {\n      this.parseError = true;\n    }\n    if (isDoubleDot(this.buffer)) {\n      shortenPath(this.url);\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\n        this.url.path.push(\"\");\n      }\n    } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {\n      this.url.path.push(\"\");\n    } else if (!isSingleDot(this.buffer)) {\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n        if (this.url.host !== \"\" && this.url.host !== null) {\n          this.parseError = true;\n          this.url.host = \"\";\n        }\n        this.buffer = this.buffer[0] + \":\";\n      }\n      this.url.path.push(this.buffer);\n    }\n    this.buffer = \"\";\n    if (this.url.scheme === \"file\" && (c === undefined || c === 63 || c === 35)) {\n      while (this.url.path.length > 1 && this.url.path[0] === \"\") {\n        this.parseError = true;\n        this.url.path.shift();\n      }\n    }\n    if (c === 63) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    }\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += percentEncodeChar(c, isPathPercentEncode);\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\n  if (c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else {\n    // TODO: Add: not a URL code point\n    if (!isNaN(c) && c !== 37) {\n      this.parseError = true;\n    }\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    if (!isNaN(c)) {\n      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n  if (isNaN(c) || !this.stateOverride && c === 35) {\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n      this.encodingOverride = \"utf-8\";\n    }\n    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead\n    for (let i = 0; i < buffer.length; ++i) {\n      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E) {\n        this.url.query += percentEncode(buffer[i]);\n      } else {\n        this.url.query += String.fromCodePoint(buffer[i]);\n      }\n    }\n    this.buffer = \"\";\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n  if (isNaN(c)) {// do nothing\n  } else if (c === 0x0) {\n    this.parseError = true;\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);\n  }\n  return true;\n};\nfunction serializeURL(url, excludeFragment) {\n  let output = url.scheme + \":\";\n  if (url.host !== null) {\n    output += \"//\";\n    if (url.username !== \"\" || url.password !== \"\") {\n      output += url.username;\n      if (url.password !== \"\") {\n        output += \":\" + url.password;\n      }\n      output += \"@\";\n    }\n    output += serializeHost(url.host);\n    if (url.port !== null) {\n      output += \":\" + url.port;\n    }\n  } else if (url.host === null && url.scheme === \"file\") {\n    output += \"//\";\n  }\n  if (url.cannotBeABaseURL) {\n    output += url.path[0];\n  } else {\n    for (const string of url.path) {\n      output += \"/\" + string;\n    }\n  }\n  if (url.query !== null) {\n    output += \"?\" + url.query;\n  }\n  if (!excludeFragment && url.fragment !== null) {\n    output += \"#\" + url.fragment;\n  }\n  return output;\n}\nfunction serializeOrigin(tuple) {\n  let result = tuple.scheme + \"://\";\n  result += serializeHost(tuple.host);\n  if (tuple.port !== null) {\n    result += \":\" + tuple.port;\n  }\n  return result;\n}\nmodule.exports.serializeURL = serializeURL;\nmodule.exports.serializeURLOrigin = function (url) {\n  // https://url.spec.whatwg.org/#concept-url-origin\n  switch (url.scheme) {\n    case \"blob\":\n      try {\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\n      } catch (e) {\n        // serializing an opaque origin returns \"null\"\n        return \"null\";\n      }\n    case \"ftp\":\n    case \"gopher\":\n    case \"http\":\n    case \"https\":\n    case \"ws\":\n    case \"wss\":\n      return serializeOrigin({\n        scheme: url.scheme,\n        host: url.host,\n        port: url.port\n      });\n    case \"file\":\n      // spec says \"exercise to the reader\", chrome says \"file://\"\n      return \"file://\";\n    default:\n      // serializing an opaque origin returns \"null\"\n      return \"null\";\n  }\n};\nmodule.exports.basicURLParse = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n  if (usm.failure) {\n    return \"failure\";\n  }\n  return usm.url;\n};\nmodule.exports.setTheUsername = function (url, username) {\n  url.username = \"\";\n  const decoded = punycode.ucs2.decode(username);\n  for (let i = 0; i < decoded.length; ++i) {\n    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\n  }\n};\nmodule.exports.setThePassword = function (url, password) {\n  url.password = \"\";\n  const decoded = punycode.ucs2.decode(password);\n  for (let i = 0; i < decoded.length; ++i) {\n    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\n  }\n};\nmodule.exports.serializeHost = serializeHost;\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\nmodule.exports.serializeInteger = function (integer) {\n  return String(integer);\n};\nmodule.exports.parseURL = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  // We don't handle blobs, so this just delegates:\n  return module.exports.basicURLParse(input, {\n    baseURL: options.baseURL,\n    encodingOverride: options.encodingOverride\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/whatwg-url/lib/url-state-machine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/whatwg-url/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/whatwg-url/lib/utils.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports.mixin = function mixin(target, source) {\n  const keys = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\nmodule.exports.wrapperSymbol = Symbol(\"wrapper\");\nmodule.exports.implSymbol = Symbol(\"impl\");\nmodule.exports.wrapperForImpl = function (impl) {\n  return impl[module.exports.wrapperSymbol];\n};\nmodule.exports.implForWrapper = function (wrapper) {\n  return wrapper[module.exports.implSymbol];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLG9CQUFvQixHQUFHLFNBQVNFLEtBQUtBLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO0VBQ3BELE1BQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxtQkFBbUIsQ0FBQ0gsTUFBTSxDQUFDO0VBQy9DLEtBQUssSUFBSUksQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxJQUFJLENBQUNJLE1BQU0sRUFBRSxFQUFFRCxDQUFDLEVBQUU7SUFDcENGLE1BQU0sQ0FBQ0ksY0FBYyxDQUFDUCxNQUFNLEVBQUVFLElBQUksQ0FBQ0csQ0FBQyxDQUFDLEVBQUVGLE1BQU0sQ0FBQ0ssd0JBQXdCLENBQUNQLE1BQU0sRUFBRUMsSUFBSSxDQUFDRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFGO0FBQ0YsQ0FBQztBQUVEUiw0QkFBNEIsR0FBR2EsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNoRGIseUJBQXlCLEdBQUdhLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFFMUNiLDZCQUE2QixHQUFHLFVBQVVnQixJQUFJLEVBQUU7RUFDOUMsT0FBT0EsSUFBSSxDQUFDaEIsTUFBTSxDQUFDQyxPQUFPLENBQUNXLGFBQWEsQ0FBQztBQUMzQyxDQUFDO0FBRURaLDZCQUE2QixHQUFHLFVBQVVrQixPQUFPLEVBQUU7RUFDakQsT0FBT0EsT0FBTyxDQUFDbEIsTUFBTSxDQUFDQyxPQUFPLENBQUNhLFVBQVUsQ0FBQztBQUMzQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3N0YXRlLWNhdGFseXN0Ly4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL3V0aWxzLmpzP2E1MzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzLm1peGluID0gZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCBzb3VyY2UpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleXNbaV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXlzW2ldKSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLndyYXBwZXJTeW1ib2wgPSBTeW1ib2woXCJ3cmFwcGVyXCIpO1xubW9kdWxlLmV4cG9ydHMuaW1wbFN5bWJvbCA9IFN5bWJvbChcImltcGxcIik7XG5cbm1vZHVsZS5leHBvcnRzLndyYXBwZXJGb3JJbXBsID0gZnVuY3Rpb24gKGltcGwpIHtcbiAgcmV0dXJuIGltcGxbbW9kdWxlLmV4cG9ydHMud3JhcHBlclN5bWJvbF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pbXBsRm9yV3JhcHBlciA9IGZ1bmN0aW9uICh3cmFwcGVyKSB7XG4gIHJldHVybiB3cmFwcGVyW21vZHVsZS5leHBvcnRzLmltcGxTeW1ib2xdO1xufTtcblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtaXhpbiIsInRhcmdldCIsInNvdXJjZSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaSIsImxlbmd0aCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlclN5bWJvbCIsIlN5bWJvbCIsImltcGxTeW1ib2wiLCJ3cmFwcGVyRm9ySW1wbCIsImltcGwiLCJpbXBsRm9yV3JhcHBlciIsIndyYXBwZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/whatwg-url/lib/utils.js\n");

/***/ })

};
;